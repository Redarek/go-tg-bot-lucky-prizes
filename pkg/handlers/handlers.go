package handlers

import (
	"context"
	_ "embed"
	"fmt"
	"github.com/Redarek/go-tg-bot-lucky-prizes/pkg/config"
	"github.com/Redarek/go-tg-bot-lucky-prizes/pkg/models"
	"github.com/Redarek/go-tg-bot-lucky-prizes/pkg/repositories"
	"github.com/Redarek/go-tg-bot-lucky-prizes/pkg/services"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"log"
	"strconv"
	"strings"
	"time"
)

//go:embed assets/start.jpeg
var StartJPG []byte

type Handler struct {
	bot            *tgbotapi.BotAPI
	service        *services.Service
	adminID        int64
	shopURL        string
	subChannelID   int64
	subChannelLink string
}

func NewHandler(bot *tgbotapi.BotAPI, db *pgxpool.Pool, cfg *config.Config) *Handler {
	repo := repositories.NewRepository(db)
	return &Handler{
		bot:            bot,
		service:        services.NewService(repo),
		adminID:        cfg.AdminID,
		shopURL:        cfg.ShopURL,
		subChannelID:   cfg.SubChannelID,
		subChannelLink: cfg.SubChannelLink,
	}
}

func (h *Handler) HandleUpdate(upd tgbotapi.Update) {
	ctx := context.Background()

	if upd.Message != nil {

		if upd.Message.IsCommand() && upd.Message.From.ID == h.adminID {
			h.handleAdminCommand(ctx, upd.Message)
			return
		}

		if upd.Message.IsCommand() &&
			upd.Message.From.ID != h.adminID &&
			upd.Message.Command() == "draw" {

			h.processDraw(ctx, upd.Message.Chat.ID, upd.Message.From.ID)
			return
		}

		if upd.Message.IsCommand() &&
			upd.Message.From.ID != h.adminID &&
			upd.Message.Command() == "start" {
			h.sendStartMessage(upd.Message.Chat.ID)
			return
		}

		h.handleAdminDialog(ctx, upd.Message)
		return
	}

	if upd.CallbackQuery != nil {
		h.handleCallback(ctx, upd.CallbackQuery)
	}
}

func (h *Handler) sendStartMessage(chatID int64) {
	err := h.service.Repo.UpsertBotUser(context.Background(), chatID)
	if err != nil {
		log.Println(err)
		return
	}

	mk := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫", "draw"),
		))

	caption := "üéØ<b><u>–ì–æ—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É?</u></b>\n" +
		"–ó–∞–ø—É—Å–∫–∞–π –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã –∏ –∑–∞–±–∏—Ä–∞–π –æ–¥–∏–Ω –∏–∑ <i>—Ñ–∏—Ä–º–µ–Ω–Ω—ã—Ö —É–ª—å—Ç—Ä–∞-–±—Ä—É—Ç–∞–ª—å–Ω—ã—Ö</i> —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ <b>TWILIGHT HAMMER!</b>\n" +
		"‚ò∏Ô∏è<i>–ö—Ä—É—Ç–∏ –∫–æ–ª–µ—Å–æ, –±–æ–µ—Ü! –ó–∞–±–µ—Ä–∏ —Å–≤–æ–π —Ç—Ä–æ—Ñ–µ–π!</i>"

	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileBytes{
		Name:  "start.jpg",
		Bytes: StartJPG,
	})
	photo.Caption = caption
	photo.ReplyMarkup = mk
	photo.ParseMode = tgbotapi.ModeHTML

	if _, err := h.bot.Send(photo); err != nil {
		_ = err
	}
}

func (h *Handler) handleCallback(ctx context.Context, q *tgbotapi.CallbackQuery) {
	switch {
	case q.Data == "start":
		h.sendStartMessage(q.Message.Chat.ID)

	case q.Data == "draw":
		h.processDraw(ctx, q.Message.Chat.ID, q.From.ID)

	case strings.HasPrefix(q.Data, "pack_"):
		id, _ := strconv.Atoi(strings.TrimPrefix(q.Data, "pack_"))
		mk := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("edit_%d", id)),
				tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("del_%d", id)),
			))
		msg := tgbotapi.NewMessage(q.Message.Chat.ID, "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–º?")
		msg.ReplyMarkup = mk
		_, err := h.bot.Send(msg)
		if err != nil {
			log.Println(err)
			return
		}

	case strings.HasPrefix(q.Data, "del_"):
		id := strings.TrimPrefix(q.Data, "del_")
		mk := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "delok_"+id),
			))

		msg := tgbotapi.NewMessage(q.Message.Chat.ID, "–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å?")
		msg.ReplyMarkup = mk
		_, err := h.bot.Send(msg)
		if err != nil {
			log.Println(err)
			return
		}

	case strings.HasPrefix(q.Data, "delok_"):
		id, _ := strconv.Atoi(strings.TrimPrefix(q.Data, "delok_"))
		if err := h.service.Repo.DeleteStickerPack(ctx, id); err != nil {
			_, err = h.bot.Send(tgbotapi.NewMessage(q.Message.Chat.ID,
				"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: "+err.Error()))
			if err != nil {
				log.Println(err)
				return
			}
		} else {
			_, err = h.bot.Send(tgbotapi.NewMessage(q.Message.Chat.ID, "‚úÖ –£–¥–∞–ª–µ–Ω–æ"))
			if err != nil {
				log.Println(err)
				return
			}
		}

	case strings.HasPrefix(q.Data, "edit_"):
		id := strings.TrimPrefix(q.Data, "edit_")
		_ = h.service.Repo.SetAdminState(ctx, models.AdminState{
			UserID: q.From.ID, State: "edit_wait_name", Data: id,
		})
		_, err := h.bot.Send(tgbotapi.NewMessage(q.Message.Chat.ID,
			"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"))
		if err != nil {
			log.Println(err)
			return
		}
	}
}

func (h *Handler) handleAdminCommand(ctx context.Context, m *tgbotapi.Message) {
	switch m.Command() {
	case "start":
		h.sendStartMessage(m.Chat.ID)

	case "packs":
		h.showPacksList(ctx, m.Chat.ID)

	case "addpack":
		_ = h.service.Repo.SetAdminState(ctx, models.AdminState{
			UserID: m.From.ID, State: "add_wait_name",
		})
		_, err := h.bot.Send(tgbotapi.NewMessage(m.Chat.ID,
			"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞:"))
		if err != nil {
			log.Println(err)
			return
		}

	case "draw":
		h.processDraw(ctx, m.Chat.ID, m.From.ID)
	}
}

func (h *Handler) showPacksList(ctx context.Context, chatID int64) {
	packs, _ := h.service.Repo.GetStickerPacks(ctx)
	if len(packs) == 0 {
		_, err := h.bot.Send(tgbotapi.NewMessage(chatID, "–°—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"))
		if err != nil {
			log.Println(err)
			return
		}
		return
	}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, p := range packs {
		btn := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("[%d] %s", p.ID, p.Name),
			fmt.Sprintf("pack_%d", p.ID))
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}
	mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫:")
	msg.ReplyMarkup = mk
	_, err := h.bot.Send(msg)
	if err != nil {
		log.Println(err)
		return
	}
}

func (h *Handler) handleAdminDialog(ctx context.Context, m *tgbotapi.Message) {
	st, _ := h.service.Repo.GetAdminState(ctx, m.From.ID)

	switch st.State {

	case "add_wait_name":
		_ = h.service.Repo.SetAdminState(ctx, models.AdminState{
			UserID: m.From.ID, State: "add_wait_url", Data: m.Text,
		})
		_, err := h.bot.Send(tgbotapi.NewMessage(m.Chat.ID, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:"))
		if err != nil {
			log.Println(err)
			return
		}

	case "add_wait_url":
		if err := h.service.Repo.CreateStickerPack(ctx, st.Data, m.Text); err != nil {
			_, err = h.bot.Send(tgbotapi.NewMessage(m.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()))
			if err != nil {
				log.Println(err)
				return
			}
			return
		}
		err := h.service.Repo.ClearAdminState(ctx, m.From.ID)
		if err != nil {
			log.Println(err)
			return
		}
		_, err = h.bot.Send(tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –°—Ç–∏–∫–µ—Ä–ø–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω"))
		if err != nil {
			log.Println(err)
			return
		}

	case "edit_wait_name":
		_ = h.service.Repo.SetAdminState(ctx, models.AdminState{
			UserID: m.From.ID,
			State:  "edit_wait_url",
			Data:   st.Data + "|" + m.Text,
		})
		_, err := h.bot.Send(tgbotapi.NewMessage(m.Chat.ID, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:"))
		if err != nil {
			log.Println(err)
			return
		}

	case "edit_wait_url":
		parts := strings.SplitN(st.Data, "|", 2)
		id, _ := strconv.Atoi(parts[0])
		newName := parts[1]
		newURL := m.Text
		if err := h.service.Repo.UpdateStickerPack(ctx, id, newName, newURL); err != nil {
			_, err = h.bot.Send(tgbotapi.NewMessage(m.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()))
			if err != nil {
				log.Println(err)
				return
			}
			return
		}
		err := h.service.Repo.ClearAdminState(ctx, m.From.ID)
		if err != nil {
			log.Println(err)
			return
		}
		_, err = h.bot.Send(tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ"))
		if err != nil {
			log.Println(err)
			return
		}
	}
}

func (h *Handler) subscribed(userID int64) bool {
	if h.subChannelID == 0 {
		return true
	}

	cfg := tgbotapi.ChatConfigWithUser{
		ChatID: h.subChannelID,
		UserID: userID,
	}

	member, err := h.bot.GetChatMember(tgbotapi.GetChatMemberConfig{ChatConfigWithUser: cfg})
	if err != nil {
		log.Println(err)
		return false
	}

	switch member.Status {
	case "creator", "administrator", "member":
		return true
	default:
		return false
	}
}

func (h *Handler) processDraw(ctx context.Context, chatID, userID int64) {
	if !h.subscribed(userID) {
		mk := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "draw"),
			))
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª "+h.subChannelLink+", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫")
		msg.ReplyMarkup = mk
		_, err := h.bot.Send(msg)
		if err != nil {
			log.Println(err)
			return
		}
		return
	}

	p, err := h.service.ClaimStickerPack(ctx, userID, h.adminID)
	if err != nil {
		if strings.Contains(err.Error(), "–°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ –ø—É—Å—Ç") {
			_, err = h.bot.Send(tgbotapi.NewMessage(chatID,
				"‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			if err != nil {
				log.Println(err)
				return
			}
			return
		}
		mk := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("–ó–∞–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω—é", h.shopURL),
			))

		msg := tgbotapi.NewMessage(chatID, err.Error())
		msg.ParseMode = tgbotapi.ModeHTML
		msg.ReplyMarkup = mk
		_, err = h.bot.Send(msg)
		if err != nil {
			log.Println(err)
			return
		}
		return
	}

	dice := tgbotapi.NewDice(chatID)
	dice.Emoji = "üé≤" // –µ—Å—Ç—å –µ—â—ë üé≤ ‚öΩ üèÄ üé≥ üéØüé∞
	_, err = h.bot.Send(dice)
	if err != nil {
		log.Println(err)
		return
	}

	time.Sleep(2 * time.Second)

	text := "üòé<b>–ù–ò–®–¢–Ø–ö!</b> –¢—ã –∑–∞–ª—É—Ç–∞–ª –∫—Ä—É—Ç–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫!\n" +
		"‚öîÔ∏è–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –≤ —Ä—É–∫–∞—Ö –æ—Ä—É–∂–∏–µ –¥–ª—è —á–∞—Ç–æ–≤ ‚Äî <i>–±–µ–π —Å–ª–æ–≤–∞–º–∏, –∂–≥–∏ —ç–º–æ—Ü–∏—è–º–∏, –≤–∑—Ä—ã–≤–∞–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏!</i>\n\n" + p.URL

	res := tgbotapi.NewMessage(chatID, text)
	res.ParseMode = tgbotapi.ModeHTML
	_, err = h.bot.Send(res)
	if err != nil {
		log.Println(err)
		return
	}

	time.Sleep(1 * time.Second)
	mk := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ó–∞–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω—é", h.shopURL),
		))
	textAfterDraw := "‚ö°Ô∏è<u>–ü–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞ –æ–¥–Ω–∞ ‚Äî –∏ –§–æ—Ä—Ç—É–Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–ª–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å!</u>\n" +
		"üîÑ–•–æ—á–µ—à—å –¥—Ä—É–≥–æ–π? –¢–æ–≥–¥–∞ –∑–∞–∫–∞–∑—ã–≤–∞–π –Ω–∞—à—É –±—Ä–æ–Ω—é TWILIGHT HAMMER –∏ –ø–æ–ª—É—á–∞–π –≤ –±–æ–Ω—É—Å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–¥—ë—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å —ç–∫–∏–ø–∏—Ä–æ–≤–∫–æ–π.\n\n" +
		"<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–µ—à—å —Ç—É—Ç:</b>\n" +
		"üü£<b><a href=\"https://www.wildberries.ru/brands/311439225-twilight-hammer\">WILDBERRIES</a></b>\n" +
		"üîµ<b><a href=\"https://vk.com/t.hammer.clan\">VKONTAKTE</a></b>"
	resAfterDraw := tgbotapi.NewMessage(chatID, textAfterDraw)
	resAfterDraw.ParseMode = tgbotapi.ModeHTML
	resAfterDraw.ReplyMarkup = mk
	_, err = h.bot.Send(resAfterDraw)
	if err != nil {
		log.Println(err)
		return
	}
}
