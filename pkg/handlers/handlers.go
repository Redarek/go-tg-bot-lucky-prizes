package handlers

import (
	"context"
	_ "embed"
	"errors"
	"fmt"
	"github.com/Redarek/go-tg-bot-lucky-prizes/pkg/config"
	"github.com/Redarek/go-tg-bot-lucky-prizes/pkg/models"
	"github.com/Redarek/go-tg-bot-lucky-prizes/pkg/repositories"
	"github.com/Redarek/go-tg-bot-lucky-prizes/pkg/services"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"log"
	"strconv"
	"strings"
	"time"
)

//go:embed assets/start.jpeg
var StartJPG []byte

type Handler struct {
	bot            *tgbotapi.BotAPI
	sender         *services.Sender
	service        *services.Service
	adminID        int64
	shopURL        string
	subChannelID   int64
	subChannelLink string
}

func NewHandler(bot *tgbotapi.BotAPI, sender *services.Sender, db *pgxpool.Pool, cfg *config.Config) *Handler {
	repo := repositories.NewRepository(db)
	return &Handler{
		bot:            bot,
		sender:         sender,
		service:        services.NewService(repo),
		adminID:        cfg.AdminID,
		shopURL:        cfg.ShopURL,
		subChannelID:   cfg.SubChannelID,
		subChannelLink: cfg.SubChannelLink,
	}
}

func (h *Handler) HandleUpdate(upd tgbotapi.Update) {
	// –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞
	ctx, cancel := context.WithTimeout(context.Background(), 8*time.Second)
	defer cancel()

	switch {
	case upd.Message != nil:
		m := upd.Message

		// –°–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
		if m.IsCommand() && m.From != nil && m.From.ID == h.adminID {
			h.handleAdminCommand(ctx, m)
			return
		}

		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
		if m.IsCommand() && m.From != nil && m.From.ID != h.adminID {
			switch m.Command() {
			case "draw":
				h.processDraw(ctx, m.Chat.ID, m.From.ID)
				return
			case "start":
				h.sendStartMessage(ctx, m.Chat.ID)
				return
			}
		}

		// –î–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∞ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ (—á—Ç–æ–±—ã –Ω–µ –±–∏—Ç—å –ë–î –ø–æ –∫–∞–∂–¥–æ–º—É —é–∑–µ—Ä—É)
		if m.From != nil && m.From.ID == h.adminID {
			h.handleAdminDialog(ctx, m)
		}

	case upd.CallbackQuery != nil:
		h.handleCallback(ctx, upd.CallbackQuery)
	}
}

func (h *Handler) sendStartMessage(ctx context.Context, chatID int64) {
	dbctx, cancel := context.WithTimeout(ctx, 300*time.Millisecond)
	defer cancel()
	if err := h.service.Repo.UpsertBotUser(dbctx, chatID); err != nil {
		log.Println("UpsertBotUser:", err)
	}

	mk := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫", "draw"),
		))

	caption := "üéØ<b><u>–ì–æ—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É?</u></b>\n" +
		"–ó–∞–ø—É—Å–∫–∞–π –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã –∏ –∑–∞–±–∏—Ä–∞–π –æ–¥–∏–Ω –∏–∑ <i>—Ñ–∏—Ä–º–µ–Ω–Ω—ã—Ö —É–ª—å—Ç—Ä–∞-–±—Ä—É—Ç–∞–ª—å–Ω—ã—Ö</i> —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ <b>TWILIGHT HAMMER!</b>\n" +
		"‚ò∏Ô∏è<i>–ö—Ä—É—Ç–∏ –∫–æ–ª–µ—Å–æ, –±–æ–µ—Ü! –ó–∞–±–µ—Ä–∏ —Å–≤–æ–π —Ç—Ä–æ—Ñ–µ–π!</i>"

	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileBytes{Name: "start.jpg", Bytes: StartJPG})
	photo.Caption = caption
	photo.ReplyMarkup = mk
	photo.ParseMode = tgbotapi.ModeHTML
	if _, err := h.sender.Send(ctx, photo); err != nil {
		log.Println("sendStartMessage:", err)
	}
}

func (h *Handler) handleCallback(ctx context.Context, q *tgbotapi.CallbackQuery) {
	// –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
	if q.ID != "" {
		_, _ = h.bot.Request(tgbotapi.NewCallback(q.ID, ""))
	}

	// –ë—ã–≤–∞—é—Ç –∏–Ω–ª–∞–π–Ω-–∫–æ–ª–ª–±—ç–∫–∏ –±–µ–∑ Message
	if q.Message == nil {
		return
	}

	switch {
	case q.Data == "start":
		h.sendStartMessage(ctx, q.Message.Chat.ID)

	case q.Data == "draw":
		h.processDraw(ctx, q.Message.Chat.ID, q.From.ID)

	case strings.HasPrefix(q.Data, "pack_"):
		id, _ := strconv.Atoi(strings.TrimPrefix(q.Data, "pack_"))
		mk := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("edit_%d", id)),
				tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("del_%d", id)),
			))
		msg := tgbotapi.NewMessage(q.Message.Chat.ID, "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–º?")
		msg.ReplyMarkup = mk
		if _, err := h.sender.Send(ctx, msg); err != nil {
			log.Println(err)
		}

	case strings.HasPrefix(q.Data, "del_"):
		id := strings.TrimPrefix(q.Data, "del_")
		mk := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "delok_"+id),
			))
		msg := tgbotapi.NewMessage(q.Message.Chat.ID, "–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å?")
		msg.ReplyMarkup = mk
		if _, err := h.sender.Send(ctx, msg); err != nil {
			log.Println(err)
		}

	case strings.HasPrefix(q.Data, "delok_"):
		id, _ := strconv.Atoi(strings.TrimPrefix(q.Data, "delok_"))
		dbctx, cancel := context.WithTimeout(ctx, 500*time.Millisecond)
		defer cancel()
		if err := h.service.Repo.DeleteStickerPack(dbctx, id); err != nil {
			_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(q.Message.Chat.ID, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: "+err.Error()))
		} else {
			_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(q.Message.Chat.ID, "‚úÖ –£–¥–∞–ª–µ–Ω–æ"))
		}

	case strings.HasPrefix(q.Data, "edit_"):
		id := strings.TrimPrefix(q.Data, "edit_")
		dbctx, cancel := context.WithTimeout(ctx, 500*time.Millisecond)
		defer cancel()
		_ = h.service.Repo.SetAdminState(dbctx, models.AdminState{
			UserID: q.From.ID, State: "edit_wait_name", Data: id,
		})
		_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(q.Message.Chat.ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"))
	}
}

func (h *Handler) handleAdminCommand(ctx context.Context, m *tgbotapi.Message) {
	switch m.Command() {
	case "start":
		h.sendStartMessage(ctx, m.Chat.ID)
	case "packs":
		h.showPacksList(ctx, m.Chat.ID)
	case "addpack":
		dbctx, cancel := context.WithTimeout(ctx, 500*time.Millisecond)
		defer cancel()
		_ = h.service.Repo.SetAdminState(dbctx, models.AdminState{
			UserID: m.From.ID, State: "add_wait_name",
		})
		_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(m.Chat.ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞:"))
	case "draw":
		h.processDraw(ctx, m.Chat.ID, m.From.ID)
	}
}

func (h *Handler) showPacksList(ctx context.Context, chatID int64) {
	dbctx, cancel := context.WithTimeout(ctx, 500*time.Millisecond)
	defer cancel()
	packs, err := h.service.Repo.GetStickerPacks(dbctx)
	if err != nil {
		log.Println("GetStickerPacks:", err)
		return
	}
	if len(packs) == 0 {
		_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(chatID, "–°—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"))
		return
	}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, p := range packs {
		btn := tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("[%d] %s", p.ID, p.Name), fmt.Sprintf("pack_%d", p.ID))
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}
	mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫:")
	msg.ReplyMarkup = mk
	_, _ = h.sender.Send(ctx, msg)
}

func (h *Handler) handleAdminDialog(ctx context.Context, m *tgbotapi.Message) {
	dbctx, cancel := context.WithTimeout(ctx, 500*time.Millisecond)
	defer cancel()
	st, _ := h.service.Repo.GetAdminState(dbctx, m.From.ID)

	switch st.State {

	case "add_wait_name":
		_ = h.service.Repo.SetAdminState(dbctx, models.AdminState{
			UserID: m.From.ID, State: "add_wait_url", Data: m.Text,
		})
		_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(m.Chat.ID, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:"))

	case "add_wait_url":
		if err := h.service.Repo.CreateStickerPack(dbctx, st.Data, m.Text); err != nil {
			_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(m.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()))
			return
		}
		_ = h.service.Repo.ClearAdminState(dbctx, m.From.ID)
		_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –°—Ç–∏–∫–µ—Ä–ø–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω"))

	case "edit_wait_name":
		_ = h.service.Repo.SetAdminState(dbctx, models.AdminState{
			UserID: m.From.ID, State: "edit_wait_url", Data: st.Data + "|" + m.Text,
		})
		_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(m.Chat.ID, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:"))

	case "edit_wait_url":
		parts := strings.SplitN(st.Data, "|", 2)
		id, _ := strconv.Atoi(parts[0])
		newName := parts[1]
		newURL := m.Text
		if err := h.service.Repo.UpdateStickerPack(dbctx, id, newName, newURL); err != nil {
			_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(m.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()))
			return
		}
		_ = h.service.Repo.ClearAdminState(dbctx, m.From.ID)
		_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ"))
	}
}

func (h *Handler) subscribed(ctx context.Context, userID int64) bool {
	if h.subChannelID == 0 {
		return true
	}
	// –£—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç Telegram
	if err := h.sender.Wait(ctx); err != nil {
		log.Println("rate wait:", err)
		return false
	}

	cfg := tgbotapi.ChatConfigWithUser{ChatID: h.subChannelID, UserID: userID}
	member, err := h.bot.GetChatMember(tgbotapi.GetChatMemberConfig{ChatConfigWithUser: cfg})
	if err != nil {
		log.Println("GetChatMember:", err)
		return false
	}
	switch member.Status {
	case "creator", "administrator", "member":
		return true
	default:
		return false
	}
}

func (h *Handler) processDraw(ctx context.Context, chatID, userID int64) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
	subCtx, cancel := context.WithTimeout(ctx, 2*time.Second)
	defer cancel()
	if !h.subscribed(subCtx, userID) {
		mk := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "draw"),
			))
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª "+h.subChannelLink+", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫")
		msg.ReplyMarkup = mk
		_, _ = h.sender.Send(ctx, msg)
		return
	}

	// –ö–ª–µ–π–º + –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞
	dbctx, cancel := context.WithTimeout(ctx, 500*time.Millisecond)
	defer cancel()
	p, err := h.service.ClaimStickerPack(dbctx, userID, h.adminID)
	if err != nil {
		switch {
		case errors.Is(err, services.ErrAlreadyClaimed):
			mk := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonURL("–ó–∞–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω—é", h.shopURL),
				))
			msg := tgbotapi.NewMessage(chatID,
				"‚ö°Ô∏è<u>–ü–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞ –æ–¥–Ω–∞ ‚Äî –∏ –§–æ—Ä—Ç—É–Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–ª–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å!</u>\n"+
					"üîÑ–•–æ—á–µ—à—å –¥—Ä—É–≥–æ–π? –¢–æ–≥–¥–∞ –∑–∞–∫–∞–∑—ã–≤–∞–π –Ω–∞—à—É –±—Ä–æ–Ω—é TWILIGHT HAMMER –∏ –ø–æ–ª—É—á–∞–π –≤ –±–æ–Ω—É—Å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–¥—ë—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å —ç–∫–∏–ø–∏—Ä–æ–≤–∫–æ–π.\n\n"+
					"<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–µ—à—å —Ç—É—Ç:</b>\n"+
					"üü£<b><a href=\"https://www.wildberries.ru/brands/311439225-twilight-hammer\">WILDBERRIES</a></b>\n"+
					"üîµ<b><a href=\"https://vk.com/t.hammer.clan\">VKONTAKTE</a></b>")
			msg.ParseMode = tgbotapi.ModeHTML
			msg.ReplyMarkup = mk
			_, _ = h.sender.Send(ctx, msg)
			return
		case errors.Is(err, repositories.ErrNoPacks):
			_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			return
		default:
			log.Println("ClaimStickerPack:", err)
			_, _ = h.sender.Send(ctx, tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			return
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–∫—É–±–∏–∫" —Å—Ä–∞–∑—É‚Ä¶
	dice := tgbotapi.NewDice(chatID)
	dice.Emoji = "üé≤"
	_, _ = h.sender.Send(ctx, dice)

	// ‚Ä¶–∞ –¥–∞–ª—å—à–µ ‚Äî –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
	go func(chatID int64, url, shop string) {
		time.Sleep(2 * time.Second)

		text := "üòé<b>–ù–ò–®–¢–Ø–ö!</b> –¢—ã –∑–∞–ª—É—Ç–∞–ª –∫—Ä—É—Ç–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫!\n" +
			"‚öîÔ∏è–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –≤ —Ä—É–∫–∞—Ö –æ—Ä—É–∂–∏–µ –¥–ª—è —á–∞—Ç–æ–≤ ‚Äî <i>–±–µ–π —Å–ª–æ–≤–∞–º–∏, –∂–≥–∏ —ç–º–æ—Ü–∏—è–º–∏, –≤–∑—Ä—ã–≤–∞–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏!</i>\n\n" + url
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = tgbotapi.ModeHTML
		_, _ = h.sender.Send(context.Background(), msg)

		time.Sleep(1 * time.Second)

		mk := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("–ó–∞–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω—é", shop),
			))
		after := "‚ö°Ô∏è<u>–ü–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞ –æ–¥–Ω–∞ ‚Äî –∏ –§–æ—Ä—Ç—É–Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–ª–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å!</u>\n" +
			"üîÑ–•–æ—á–µ—à—å –¥—Ä—É–≥–æ–π? –¢–æ–≥–¥–∞ –∑–∞–∫–∞–∑—ã–≤–∞–π –Ω–∞—à—É –±—Ä–æ–Ω—é TWILIGHT HAMMER –∏ –ø–æ–ª—É—á–∞–π –≤ –±–æ–Ω—É—Å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–¥—ë—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å —ç–∫–∏–ø–∏—Ä–æ–≤–∫–æ–π.\n\n" +
			"<b>–ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–µ—à—å —Ç—É—Ç:</b>\n" +
			"üü£<b><a href=\"https://www.wildberries.ru/brands/311439225-twilight-hammer\">WILDBERRIES</a></b>\n" +
			"üîµ<b><a href=\"https://vk.com/t.hammer.clan\">VKONTAKTE</a></b>"

		am := tgbotapi.NewMessage(chatID, after)
		am.ParseMode = tgbotapi.ModeHTML
		am.ReplyMarkup = mk
		_, _ = h.sender.Send(context.Background(), am)
	}(chatID, p.URL, h.shopURL)
}
